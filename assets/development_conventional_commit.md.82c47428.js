import{_ as e,o as t,c as a,R as s}from"./chunks/framework.32aacd6d.js";const u=JSON.parse('{"title":"约定式提交一般格式","description":"","frontmatter":{},"headers":[],"relativePath":"development/conventional_commit.md","filePath":"development/conventional_commit.md","lastUpdated":1685959821000}'),n={name:"development/conventional_commit.md"},l=s(`<h1 id="约定式提交一般格式" tabindex="-1">约定式提交一般格式 <a class="header-anchor" href="#约定式提交一般格式" aria-label="Permalink to &quot;约定式提交一般格式&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Intorduce</p><p>约定式提交规范 Conventional Commits 是一种用于给提交信息增加人机可读含义的规范，是基于提交信息的轻量级约定，提供了一组用于创建清晰的提交历史的简单规则。</p></div><div class="language-zh-cn vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zh-cn</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">&lt;类型&gt;([可选的作用于]): &lt;描述&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[可选的正文]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[可选的脚注]</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#abb2bf;">&lt;类型&gt;([可选的作用于]): &lt;描述&gt;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">[可选的正文]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">[可选的脚注]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-en vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">en</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">type(scope?): subject</span></span>
<span class="line"><span style="color:#A6ACCD;">body?</span></span>
<span class="line"><span style="color:#A6ACCD;">footer?</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#abb2bf;">type(scope?): subject</span></span>
<span class="line"><span style="color:#abb2bf;">body?</span></span>
<span class="line"><span style="color:#abb2bf;">footer?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h2 id="类型-type" tabindex="-1">类型/type <a class="header-anchor" href="#类型-type" aria-label="Permalink to &quot;类型/type&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">type</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">feat</td><td style="text-align:center;">新增功能</td></tr><tr><td style="text-align:center;">fix</td><td style="text-align:center;">修复bug</td></tr><tr><td style="text-align:center;">docs</td><td style="text-align:center;">更改文档</td></tr><tr><td style="text-align:center;">style</td><td style="text-align:center;">不影响代码含义的变化(空白，格式化，缺少分号等)</td></tr><tr><td style="text-align:center;">refactor</td><td style="text-align:center;">重构，不修复bug且不添加功能</td></tr><tr><td style="text-align:center;">ci</td><td style="text-align:center;">持续集成相关</td></tr><tr><td style="text-align:center;">test</td><td style="text-align:center;">测试相关</td></tr><tr><td style="text-align:center;">chore</td><td style="text-align:center;">重复性的日常任务</td></tr><tr><td style="text-align:center;">revert</td><td style="text-align:center;">恢复变更/回滚到上一个版本</td></tr><tr><td style="text-align:center;">perf</td><td style="text-align:center;">性能优化代码</td></tr><tr><td style="text-align:center;">build</td><td style="text-align:center;">构建方面相关</td></tr></tbody></table><h2 id="作用域-scope" tabindex="-1">作用域/scope <a class="header-anchor" href="#作用域-scope" aria-label="Permalink to &quot;作用域/scope&quot;">​</a></h2><p>紧跟&lt;类型&gt;用小括号包住，值可以按照模块、包或者某个文件进行标注</p><h2 id="描述-subject" tabindex="-1">描述/subject <a class="header-anchor" href="#描述-subject" aria-label="Permalink to &quot;描述/subject&quot;">​</a></h2><p>作为本次commit的简介，一般不超过50个字符</p><h2 id="正文-body" tabindex="-1">正文/body <a class="header-anchor" href="#正文-body" aria-label="Permalink to &quot;正文/body&quot;">​</a></h2><p>详细描述，可以分成多行</p><ul><li>语法使用第一人称现在时</li><li>应当说明变动的动机以及与以前行为的对比</li></ul><h2 id="脚注-footer" tabindex="-1">脚注/footer <a class="header-anchor" href="#脚注-footer" aria-label="Permalink to &quot;脚注/footer&quot;">​</a></h2><p>仅描述两种情况</p><ul><li>不兼容的变动： 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</li><li>关闭 Issue: Closes #234</li></ul><h2 id="破坏式更改" tabindex="-1">破坏式更改 <a class="header-anchor" href="#破坏式更改" aria-label="Permalink to &quot;破坏式更改&quot;">​</a></h2><p>约定式提交对破坏性变更有特殊的处理。如果 commit 的改动包含了破坏性的变更，有两种方式来表示：</p><ul><li>第一种方式是在类型和范围之后添加感叹号，如 feat(api)!</li><li>第二种方式是在脚注中添加 BREAKING CHANGE, 如BREAKING CHANGE: some changes</li></ul>`,20),r=[l];function o(c,p,i,d,b,h){return t(),a("div",null,r)}const m=e(n,[["render",o]]);export{u as __pageData,m as default};
